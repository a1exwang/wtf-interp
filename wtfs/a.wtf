# entry point function
main = -> {

  # function definition
  fn = -> (a,b,c) {
    # binary operators
    123 + 1221 + a;
  };

  # function call
  puts(fn(1,2,3));

  # string literal
  puts("str literal: \n" + "\t tab character");

  # high order function
  fn1 = -> (fn) {
    fn(3 + 5);
  };
  fn1(-> (val) { puts(val); });

  # array literal
  lst = [1, 2, 5, "hello world", -> { }];
  each(lst, -> (item) { puts(item); });
  puts(lst[3]);

  # a.b(c, d) is equivalent to b(a, c, d)
  "second traversal".puts();
  lst.each(-> (item) { puts(item); });

  # boolean and nil
  puts([True, False, Nil]);

  if (True) {
    puts("true");
  } else {
    puts("false");
  };

  Kernel = module {
    Math = module {
      Zero = 0;
    };
  };

  puts(Kernel::Math::Zero);

}